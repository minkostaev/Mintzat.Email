namespace Mintzat.Email.Tests;

using Microsoft.Extensions.Configuration;
using Mintzat.Email.ResendCom;

public class ResendIntegrationTests
{
    private ResendSender _sender;
    private IConfiguration _configuration;
    private string _senderEmail = "";
    private string _recipientEmail = "";
    private string _ccEmail = "";
    private string _bccEmail = "";

    [SetUp]
    public void Setup()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
        string apiKey;
        try
        {
            _configuration = builder.Build();
            apiKey = _configuration["ApiKey"]!;
        }
        catch
        {
            apiKey = Environment.GetEnvironmentVariable("APIKEY")!;
        }
        _sender = new ResendSender(apiKey);
        if (_configuration == null)
        {
            _senderEmail = Environment.GetEnvironmentVariable("SENDER")!;
            _recipientEmail = Environment.GetEnvironmentVariable("RECIPIENTS")!;
            _ccEmail = Environment.GetEnvironmentVariable("CC")!;
            _bccEmail = Environment.GetEnvironmentVariable("BCC")!;
        }
        else
        {
            _senderEmail = _configuration["Sender"]!;
            _recipientEmail = _configuration["Recipients"]!;
            _ccEmail = _configuration["Cc"]!;
            _bccEmail = _configuration["Bcc"]!;
        }
    }

    [Test]
    public async Task SendEmail_Success()
    {
        Dictionary<string, string> keyValuePairs = [];
        keyValuePairs.Add("pdf.pdf", "");
        keyValuePairs.Add("txt.txt", "dHh0IGRvYw==");

        var result = await _sender.SendEmail(_senderEmail, [_recipientEmail],
            "Test Email from Resend",
            "<h1>Hello!</h1><p>This is a test email sent using Resend API.</p>",
            null, [_ccEmail], [_bccEmail], keyValuePairs, "James Bond");

        var result2 = await _sender.SendEmail(_senderEmail, [_recipientEmail],
            "Test Email from Resend",
            "<h1>Hello!</h1><p>This is a test email sent using Resend API.</p>",
            null, [_bccEmail], [_ccEmail]);

        Assert.Multiple(() =>
        {
            Assert.That(result.Item1, Is.True);
            Assert.That(result2.Item1, Is.True);
        });
    }

}